---

####################
# Install DAVe-API
####################

# Create full SSL chain for the public key

- name: Download intermediarry certificate
  get_url:
    url: "{{ full_chain_cert }}"
    dest: /tmp/full_chain.crt
    mode: 0744
  when:
    - full_chain_cert is defined

- name: Merge cert with chain
  shell: "cat {{ api_cert_path }} /tmp/full_chain.crt > /tmp/api_full_chain.crt"
  when:
    - full_chain_cert is defined

- set_fact:
    api_full_chain: "/tmp/api_full_chain.crt"
  when:
    - full_chain_cert is defined

- set_fact:
    api_full_chain: "{{ api_cert_path }}"
  when:
    - full_chain_cert is not defined

# Generate the internal SSL key

- name: Render internal SSL template
  template:
    src: dave-api-ssl.json.j2
    dest: "{{ ca_dir }}/dave-api-ssl.json"
    mode: 0744
  become: false

- name: Create the internal SSL keys
  shell: "cfssl gencert -ca ca.pem -ca-key ca-key.pem dave-api-ssl.json | cfssljson -bare dave-api-ssl"
  args:
    chdir: "{{ ca_dir }}"

- name: Convert PKCS1 to PKCS8
  shell: "openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in dave-api-ssl-key.pem -out dave-api-ssl-pkcs8.pem"
  args:
    chdir: "{{ ca_dir }}"

- set_fact:
   dave_api_ssl_key: "{{ ca_dir }}/dave-api-ssl-pkcs8.pem"
   dave_api_ssl_cert: "{{ ca_dir }}/dave-api-ssl.pem"

# Convert LE private key to PKCS8

- name: Convert PKCS1 to PKCS8
  shell: "openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in {{ api_key_path }} -out /tmp/api-signed-private-key-pkcs8.key"

- set_fact:
   api_key_path_pkcs8: "/tmp/api-signed-private-key-pkcs8.key"

# Render templates

- name: Generate service
  template:
    src: api.service.yaml.j2
    dest: /tmp/api.service.yaml
    mode: 0744
  become: false

- name: Generate config map
  template:
    src: api.config-map.yaml.j2
    dest: /tmp/api.config-map.yaml
    mode: 0744
  become: false

- name: Generate secret
  template:
    src: api.secret.yaml.j2
    dest: /tmp/api.secret.yaml
    mode: 0744
  become: false

- name: Generate service account
  template:
    src: api.serviceaccount.yaml.j2
    dest: /tmp/api.serviceaccount.yaml
    mode: 0744
  become: false

- name: Generate role
  template:
    src: api.role.yaml.j2
    dest: /tmp/api.role.yaml
    mode: 0744
  become: false

- name: Generate role binding
  template:
    src: api.rolebinding.yaml.j2
    dest: /tmp/api.rolebinding.yaml
    mode: 0744
  become: false

- name: Generate deployment
  template:
    src: api.deployment.yaml.j2
    dest: /tmp/api.deployment.yaml
    mode: 0744
  become: false

- name: Generate HPA
  template:
    src: api.autoscaler.yaml.j2
    dest: /tmp/api.autoscaler.yaml
    mode: 0744
  become: false

# Add service account

- name: Find out if service account already exists
  command: "kubectl --namespace {{ namespace }} get serviceaccounts dave-api -o json"
  register: get_serviceaccount
  ignore_errors: true

- name: Create the service account
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.serviceaccount.yaml"
  when: get_serviceaccount|failed

- name: Replace the service account
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.serviceaccount.yaml"
  when: get_serviceaccount|succeeded

- name: Find out if role already exists
  command: "kubectl --namespace {{ namespace }} get role dave-api -o json"
  register: get_role
  ignore_errors: true

- name: Create the role
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.role.yaml"
  when: get_role|failed

- name: Replace the role
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.role.yaml"
  when: get_role|succeeded

- name: Find out if role binding already exists
  command: "kubectl --namespace {{ namespace }} get rolebinding dave-api -o json"
  register: get_rolebinding
  ignore_errors: true

- name: Create the role binding
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.rolebinding.yaml"
  when: get_rolebinding|failed

- name: Replace the role binding
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.rolebinding.yaml"
  when: get_rolebinding|succeeded

# Add service

- name: Find out if service already exists
  command: "kubectl --namespace {{ namespace }} get service dave-api -o json"
  register: get_service
  ignore_errors: true

- name: Create the service
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.service.yaml"
  when: get_service|failed

- name: Replace the service
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.service.yaml"
  when: get_service|succeeded

- name: Add annotation if internal load balancer is used
  command: "kubectl annotate --overwrite service dave-api service.beta.kubernetes.io/aws-load-balancer-internal='{{ internal_load_balancer_ip }}'"
  when: use_internal_load_balancer==true

# Add config-map

- name: Find out if config-map already exists
  command: "kubectl --namespace {{ namespace }} get cm dave-api -o json"
  register: get_cm
  ignore_errors: true

- name: Create the config-map
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.config-map.yaml"
  when: get_cm|failed

- name: Replace the config-map
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.config-map.yaml"
  when: get_cm|succeeded

# Add secret

- name: Find out if secret already exists
  command: "kubectl --namespace {{ namespace }} get secret dave-api -o json"
  register: get_secret
  ignore_errors: true

- name: Create the secret
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.secret.yaml"
  when: get_secret|failed

- name: Replace the secret
  command: "kubectl --namespace {{ namespace }} replace -f /tmp/api.secret.yaml"
  when: get_secret|succeeded

# Add deployment

- name: Find out if deployment already exists
  command: "kubectl --namespace {{ namespace }} get deployment dave-api -o json"
  register: get_deployment
  ignore_errors: true

- name: Create the deployment
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.deployment.yaml"
  when: get_deployment|failed

- name: Replace the deployment
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.deployment.yaml"
  when: get_deployment|succeeded

# Make sure the deployment is running before moving forward

- name: Verify that all pods are ready
  shell: kubectl --namespace {{ namespace }} get pods | grep "dave-api" | grep "Running" | wc -l
  register: cmd_result
  until: cmd_result.stdout.find('1') != -1
  retries: 20
  delay: 30

# Add autoscaler

- name: Find out if HPA already exists
  command: "kubectl --namespace {{ namespace }} get hpa dave-api -o json"
  register: get_hpa
  ignore_errors: true

- name: Create the HPA
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.autoscaler.yaml"
  when: get_hpa|failed

- name: Replace the HPA
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.autoscaler.yaml"
  when: get_hpa|succeeded
